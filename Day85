class InsufficientFundsError(Exception):
    """Custom exception for insufficient funds."""
    pass

class BankAccount:
    # Class variable for interest rate
    interest_rate = 0.03  # 3% annual interest

    def __init__(self, owner: str, balance: float = 0.0):
        self.owner = owner
        self._balance = balance  # Encapsulated attribute
        self._transactions = []  # Private list to track transactions

    @property
    def balance(self) -> float:
        """Getter for balance."""
        return self._balance

    @balance.setter
    def balance(self, amount: float):
        """Setter for balance (with validation)."""
        if amount < 0:
            raise ValueError("Balance cannot be negative.")
        self._balance = amount

    def deposit(self, amount: float):
        """Deposit money into the account."""
        if amount <= 0:
            raise ValueError("Deposit amount must be positive.")
        self._balance += amount
        self._transactions.append(f"Deposit: +${amount:.2f}")

    def withdraw(self, amount: float):
        """Withdraw money from the account."""
        if amount <= 0:
            raise ValueError("Withdrawal amount must be positive.")
        if amount > self._balance:
            raise InsufficientFundsError("Insufficient funds for withdrawal.")
        self._balance -= amount
        self._transactions.append(f"Withdrawal: -${amount:.2f}")

    def apply_interest(self):
        """Apply annual interest to the balance."""
        interest = self._balance * self.interest_rate
        self._balance += interest
        self._transactions.append(f"Interest Applied: +${interest:.2f}")

    def get_transaction_history(self) -> list:
        """Return the transaction history."""
        return self._transactions

    def __str__(self):
        """String representation of the account."""
        return f"BankAccount(owner={self.owner}, balance=${self._balance:.2f})"

    def __eq__(self, other):
        """Compare two accounts based on balance."""
        if isinstance(other, BankAccount):
            return self._balance == other._balance
        return False

    @classmethod
    def from_string(cls, account_info: str):
        """Alternative constructor to create an account from a string."""
        owner, balance = account_info.split(",")
        return cls(owner.strip(), float(balance.strip()))

    @staticmethod
    def calculate_interest(principal: float, years: int) -> float:
        """Static method to calculate interest."""
        return principal * BankAccount.interest_rate * years


# Example Usage
if __name__ == "__main__":
    # Create an account
    account1 = BankAccount("Alice", 1000.0)
    print(account1)

    # Deposit and withdraw
    account1.deposit(500.0)
    account1.withdraw(200.0)
    print(f"Balance after transactions: ${account1.balance:.2f}")

    # Apply interest
    account1.apply_interest()
    print(f"Balance after interest: ${account1.balance:.2f}")

    # Transaction history
    print("Transaction History:")
    for transaction in account1.get_transaction_history():
        print(transaction)

    # Create another account using the class method
    account2 = BankAccount.from_string("Bob, 1500.0")
    print(account2)

    # Compare accounts
    print(f"Are accounts equal? {account1 == account2}")

    # Calculate interest using static method
    interest = BankAccount.calculate_interest(1000.0, 5)
    print(f"Interest for $1000 over 5 years: ${interest:.2f}")
